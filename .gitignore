# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to include the following files:
#  .idea/
#  *.iml
#  *.ipr

# Project specific
# Database files
*.db
*.sqlite
*.sqlite3
graphapi.db*
test_graphapi.db*

# Token cache files
.token_cache.json
*.token_cache

# Log files
*.log
logs/

# Backup files
*_backup_*
backup_*

# IDE files
.vscode/settings.json
.vscode/launch.json
.idea/
*.swp
*.swo
*~

# OS files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Temporary files
tmp/
temp/
.tmp/

# Configuration files with secrets (keep .env.example)
.env.local
.env.production
.env.staging

# Docker
.dockerignore
docker-compose.override.yml

# Alembic
alembic/versions/*.py
!alembic/versions/__init__.py

# Coverage reports
htmlcov/
.coverage
coverage.xml

# Profiling
*.prof

# Local development
local_*
dev_*

# Documentation build
docs/_build/
docs/build/

# Virtual environments (additional patterns)
.python-version
.venv*/
venv*/
env*/

# Package files
*.tar.gz
*.zip
*.rar

# Editor backups
*~
*.bak
*.orig

# Runtime files
*.pid
*.sock

# SSL certificates
*.pem
*.key
*.crt
*.csr

# Local configuration overrides
config/local.py
config/development.py
config/production.py

# External API responses (for debugging)
api_responses/
debug_responses/

# Performance profiling
*.profile
*.pstats

# Memory profiling
*.mprof

# Jupyter notebook checkpoints
.ipynb_checkpoints/

# pytest
.pytest_cache/
.cache/

# mypy
.mypy_cache/

# Ruff
.ruff_cache/

# Black
.black_cache/

# isort
.isort.cfg

# Local scripts
scripts/local_*
scripts/dev_*

# Data files
data/
*.csv
*.json.bak
*.xml.bak

# Migrations (keep template)
migrations/versions/*.py
!migrations/versions/__init__.py

# Local documentation
docs/local/
